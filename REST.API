batchd manager REST API documentation
=====================================

The API tries to follow REST practices. It uses PUT to add things,   POST to
update them,   DELETE to delete things and GET to obtain information. In some
cases,   additional URL parameters (?name=value) are used.
For dangerous requests,   API may return 403 response code if it is not sure that
you really meant this action. To make it sure,   one should provide ?forced=true
URL parameter.

Statistic information
---------------------

URL: /stats
Method: GET

Returns a dictionary. Each entry has form "queue name": status_info.
status_info is a dictionary,   where keys are possible statuses of jobs (new,  
processing,   done,   failed),   and values are counts of jobs in that statuses.

Example response:

    {"free":{"done":3,  "failed":3}}

This means that there is only one queue,   named "free",   and it contains 3 "done"
jobs and 3 "failed".

URL: /stats/:name
Method: GET

Similar to /stats,   but returns only information about named queue.

Queues
------

URL: /queue
Method: GET

Returns list of defined queues. Each record is a dictionary with the following
fields:

* name
* schedule_name
* host_name

URL: /queue
Method: PUT

Create new job queue. In request body,   one must provide a dictionary describing
new queue.
Example request:

    {"name":"free",  "schedule_name":"anytime",  "host_name":"free"}

URL: /queue/:name
Method: GET

Obtain a list of jobs in named queue. By default,   only jobs in status "new" are
listed. One may change this by providing ?status=x URL parameter. ?status=all
is also supported. Each record of returned list is a dictionary with the
following keys:

* id - unique job ID
* seq - sequential number of this job in this queue
* type
* queue
* status
* exit_code
* create_time
* result_time
* stdout
* stderr
* host_name
* try_count - number of attempts that were done to execute this job
* params - a dictionary with job parameters values

URL: /queue/:name
Method: PUT

Put a new job into named queue. In request body,   one must provide a dictionary
describing new job. The dictionary must have at least the following keys:

* type
* params (if job has parameters)

`id',   `queue' and 'seq' keys are ignored even if provided.

URL: /queue/:name
Method: POST

Modify named job queue. Request body is similar to "add new queue" call.

URL: /queue/:name
Method: DELETE

Delete named job queue. Returns 403 if the queue is not empty and there is no
?forced=true parameter. With ?forced=true,   will delete queue with all contained
jobs.

Jobs
----

URL: /jobs
Method: GET

Return a list of all jobs in all queues. By default,   only jobs in status "new"
are returned. One may change it with ?status=x URL parameter. ?status=all is
also supported.

URL: /job/:id
Method: GET

Return information about specified job execution results. Returned is a
dictionary with the following fields:

* job_id
* exit_code
* stdout
* stderr
* time

Returns 404 if job was not executed yet.

URL: /job/:id
Method: DELETE

Delete specified job. This does not ask for any confirmation.

Schedules
---------

URL: /schedule
Method: GET

Return a list of defined schedules. Each record is a dictionary with the following keys:

* name
* weekdays - list of weekdays when job execution is allowed. null means "any weekday".
* time - list of time periods when job execution is allowed. null means "any time of day".

Example response:

    [{"time": [{"begin": "08:00:00",  "end": "18:00:00"}],  "weekdays": ["Monday", 
    "Tuesday",  "Wednesday",  "Thursday",  "Friday"],  "name": "working.hours"}]

URL: /schedule
Method: PUT

Create a new schedule. In request body,  one should provide a dictionary
describing the new schedule. Dictionary format is the same as for GET call.

URL: /schedule/:name
Method: DELETE

Delete existing schedule. Returns 403 if named schedule is used by queues and
there is no ?forced=true parameter. With ?forced=true,  this will delete the
schedule and all queues using it and all jobs in them.

Job types
---------

URL: /type
Method: GET

Return list of all defined job types. Example response:

    [{"on_fail": {"retry": {"count": 1, "when": "now"}}, "params": [{"default":
    "", "name": "count", "title": "count", "type": "Integer"}], "name":
    "count", "template": "./test.sh $count", "host_name": null}]

URL: /type/:name
Method: GET

Similar to /type, but returns only information about named job type.

